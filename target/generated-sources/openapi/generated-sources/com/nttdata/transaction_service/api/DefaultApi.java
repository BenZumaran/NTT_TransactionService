/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.transaction_service.api;

import com.nttdata.transaction_service.model.TransactionGet;
import com.nttdata.transaction_service.model.TransactionPost;
import com.nttdata.transaction_service.model.TransactionPut;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Default", description = "the Default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /transactions : Get all transactions
     *
     * @return List of transactions (status code 200)
     */
    @ApiOperation(value = "Get all transactions", nickname = "transactionsGet", notes = "", response = TransactionGet.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of transactions", response = TransactionGet.class, responseContainer = "List") })
    @GetMapping(
        value = "/transactions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionGet>> transactionsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"product\" : { \"balance\" : 6.027456183070403, \"limit\" : 1.4658129805029452, \"id\" : \"id\", \"type\" : \"account\" }, \"amount\" : 5.962133916683182, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"client\" : { \"document\" : \"document\", \"id\" : \"id\", \"type\" : \"personal\" }, \"holder\" : { \"signature\" : \"signature\", \"document\" : \"document\", \"fullName\" : \"fullName\" }, \"id\" : \"id\", \"signatory\" : { \"signature\" : \"signature\", \"document\" : \"document\", \"fullName\" : \"fullName\" }, \"type\" : \"deposit\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /transactions/{id} : Delete a transaction
     *
     * @param id  (required)
     * @return Transaction deleted (status code 204)
     */
    @ApiOperation(value = "Delete a transaction", nickname = "transactionsIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Transaction deleted") })
    @DeleteMapping(
        value = "/transactions/{id}"
    )
    default ResponseEntity<Void> transactionsIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions/{id} : Get a transaction by ID
     *
     * @param id  (required)
     * @return A single transaction (status code 200)
     *         or Transaction not found (status code 404)
     */
    @ApiOperation(value = "Get a transaction by ID", nickname = "transactionsIdGet", notes = "", response = TransactionGet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A single transaction", response = TransactionGet.class),
        @ApiResponse(code = 404, message = "Transaction not found") })
    @GetMapping(
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TransactionGet> transactionsIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"product\" : { \"balance\" : 6.027456183070403, \"limit\" : 1.4658129805029452, \"id\" : \"id\", \"type\" : \"account\" }, \"amount\" : 5.962133916683182, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"client\" : { \"document\" : \"document\", \"id\" : \"id\", \"type\" : \"personal\" }, \"holder\" : { \"signature\" : \"signature\", \"document\" : \"document\", \"fullName\" : \"fullName\" }, \"id\" : \"id\", \"signatory\" : { \"signature\" : \"signature\", \"document\" : \"document\", \"fullName\" : \"fullName\" }, \"type\" : \"deposit\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /transactions/{id} : Update a transaction
     *
     * @param id  (required)
     * @param transactionPut  (required)
     * @return Transaction updated (status code 200)
     */
    @ApiOperation(value = "Update a transaction", nickname = "transactionsIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction updated") })
    @PutMapping(
        value = "/transactions/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> transactionsIdPut(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionPut transactionPut) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /transactions : Create a new transaction
     *
     * @param transactionPost  (required)
     * @return Transaction created (status code 201)
     */
    @ApiOperation(value = "Create a new transaction", nickname = "transactionsPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction created") })
    @PostMapping(
        value = "/transactions",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> transactionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionPost transactionPost) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
