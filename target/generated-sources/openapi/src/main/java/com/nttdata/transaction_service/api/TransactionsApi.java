/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.transaction_service.api;

import com.nttdata.transaction_service.model.TransactionGet;
import com.nttdata.transaction_service.model.TransactionGetClientBalance;
import com.nttdata.transaction_service.model.TransactionPost;
import com.nttdata.transaction_service.model.TransactionPut;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-24T19:57:01.660543300-05:00[America/Lima]")
@Validated
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default TransactionsApiDelegate getDelegate() {
        return new TransactionsApiDelegate() {};
    }

    /**
     * GET /transactions : Get List of all transactions
     *
     * @return List of transactions (status code 200)
     */
    @ApiOperation(value = "Get List of all transactions", nickname = "transactionsGet", notes = "", response = TransactionGet.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of transactions", response = TransactionGet.class, responseContainer = "List") })
    @GetMapping(
        value = "/transactions",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<TransactionGet>>> transactionsGet(@ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsGet(exchange);
    }


    /**
     * DELETE /transactions/{id} : Delete a transaction
     *
     * @param id  (required)
     * @return Transaction deleted (status code 204)
     */
    @ApiOperation(value = "Delete a transaction", nickname = "transactionsIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Transaction deleted") })
    @DeleteMapping(
        value = "/transactions/{id}"
    )
    default Mono<ResponseEntity<Void>> transactionsIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsIdDelete(id, exchange);
    }


    /**
     * GET /transactions/{id} : Get a transaction by ID
     *
     * @param id  (required)
     * @return A single transaction (status code 200)
     *         or Transaction not found (status code 404)
     */
    @ApiOperation(value = "Get a transaction by ID", nickname = "transactionsIdGet", notes = "", response = TransactionGet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A single transaction", response = TransactionGet.class),
        @ApiResponse(code = 404, message = "Transaction not found") })
    @GetMapping(
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<TransactionGet>> transactionsIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsIdGet(id, exchange);
    }


    /**
     * POST /transactions : Create a new transaction
     *
     * @param transactionPost  (required)
     * @return Transaction Created (status code 201)
     */
    @ApiOperation(value = "Create a new transaction", nickname = "transactionsPost", notes = "", response = TransactionGet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction Created", response = TransactionGet.class) })
    @PostMapping(
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<TransactionGet>> transactionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<TransactionPost> transactionPost, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsPost(transactionPost, exchange);
    }


    /**
     * GET /transactions/product/{id} : Get Transactions and Products Balance by Client&#39;s Product
     *
     * @param id  (required)
     * @return Product information found (status code 200)
     */
    @ApiOperation(value = "Get Transactions and Products Balance by Client's Product", nickname = "transactionsProductIdGet", notes = "", response = TransactionGetClientBalance.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product information found", response = TransactionGetClientBalance.class) })
    @GetMapping(
        value = "/transactions/product/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<TransactionGetClientBalance>> transactionsProductIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsProductIdGet(id, exchange);
    }


    /**
     * PUT /transactions : Update a transaction (Fields except id are optionals)
     *
     * @param transactionPut  (required)
     * @return Transaction updated (status code 200)
     */
    @ApiOperation(value = "Update a transaction (Fields except id are optionals)", nickname = "transactionsPut", notes = "", response = TransactionGet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction updated", response = TransactionGet.class) })
    @PutMapping(
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<TransactionGet>> transactionsPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<TransactionPut> transactionPut, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().transactionsPut(transactionPut, exchange);
    }

}
